{
  "version": 3,
  "sources": ["src/popup.ts"],
  "sourcesContent": ["const BACKEND_URL = \"http://127.0.0.1:8000\";\n\nlet extractedProfile: any = null;\n\nasync function getActiveTab(): Promise<chrome.tabs.Tab> {\n  const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n  if (!tab || !tab.id) throw new Error(\"No active tab\");\n  return tab;\n}\n\nfunction setStatus(msg: string, type: 'loading' | 'success' | 'error' = 'loading') {\n  const el = document.getElementById(\"status\")!;\n  el.textContent = msg;\n  el.className = `status ${type}`;\n  el.classList.remove('hidden');\n}\n\nfunction hideStatus() {\n  const el = document.getElementById(\"status\")!;\n  el.classList.add('hidden');\n}\n\nfunction showSection(sectionId: string) {\n  document.getElementById(sectionId)!.classList.remove('hidden');\n}\n\nfunction hideSection(sectionId: string) {\n  document.getElementById(sectionId)!.classList.add('hidden');\n}\n\nfunction setButtonLoading(buttonId: string, loading: boolean, originalText?: string) {\n  const btn = document.getElementById(buttonId) as HTMLButtonElement;\n  if (loading) {\n    btn.disabled = true;\n    btn.setAttribute('data-original-text', btn.textContent || '');\n    btn.textContent = '\u23F3 Loading...';\n    btn.style.opacity = '0.7';\n  } else {\n    btn.disabled = false;\n    btn.textContent = originalText || btn.getAttribute('data-original-text') || btn.textContent;\n    btn.style.opacity = '1';\n  }\n}\n\n// Extract LinkedIn HTML content for LLM parsing\nfunction extractLinkedInProfile(): any {\n  console.log('\uD83D\uDD0D Starting comprehensive LinkedIn profile extraction...');\n  \n  // Comprehensive scrolling to trigger LinkedIn's lazy loading\n  function scrollAndWait(delay: number = 1000): Promise<void> {\n    return new Promise(resolve => {\n      // Scroll to different positions to trigger content loading\n      const positions = [0, 0.25, 0.5, 0.75, 1.0];\n      let currentPosition = 0;\n      \n      const scrollStep = () => {\n        if (currentPosition < positions.length) {\n          const scrollY = document.body.scrollHeight * positions[currentPosition];\n          window.scrollTo(0, scrollY);\n          console.log(`\uD83D\uDCDC Scrolling to position ${positions[currentPosition] * 100}%`);\n          currentPosition++;\n          setTimeout(scrollStep, delay / positions.length);\n        } else {\n          // Final scroll to top\n          window.scrollTo(0, 0);\n          setTimeout(resolve, 500);\n        }\n      };\n      \n      scrollStep();\n    });\n  }\n  \n  // Click \"Show more\" buttons to expand sections\n  function expandSections() {\n    const expandButtons = [\n      'button[aria-expanded=\"false\"]',\n      '.pv-profile-section__see-more-inline',\n      '.inline-show-more-text__button',\n      '.show-more-less-html__button--more',\n      '[data-control-name=\"contact_see_more\"]',\n      '.pv-entity__summary .lt-line-clamp__more'\n    ];\n    \n    let expandedCount = 0;\n    expandButtons.forEach(selector => {\n      const buttons = document.querySelectorAll(selector);\n      buttons.forEach(button => {\n        if (button instanceof HTMLElement && button.offsetParent !== null) {\n          console.log(`\uD83D\uDD3D Clicking expand button: ${selector}`);\n          button.click();\n          expandedCount++;\n        }\n      });\n    });\n    \n    console.log(`\uD83D\uDCCB Expanded ${expandedCount} sections`);\n    return expandedCount;\n  }\n  \n  // Extract visible text content\n  function getVisibleText(element: Element): string {\n    const walker = document.createTreeWalker(\n      element,\n      NodeFilter.SHOW_TEXT,\n      {\n        acceptNode: function(node) {\n          const parent = node.parentElement;\n          if (!parent) return NodeFilter.FILTER_REJECT;\n          \n          // Skip hidden elements, scripts, styles, etc.\n          const style = window.getComputedStyle(parent);\n          if (style.display === 'none' || \n              style.visibility === 'hidden' || \n              style.opacity === '0' ||\n              parent.tagName === 'SCRIPT' || \n              parent.tagName === 'STYLE' ||\n              parent.tagName === 'NOSCRIPT') {\n            return NodeFilter.FILTER_REJECT;\n          }\n          \n          return NodeFilter.FILTER_ACCEPT;\n        }\n      }\n    );\n    \n    let textContent = '';\n    let node;\n    while (node = walker.nextNode()) {\n      const text = node.textContent?.trim();\n      if (text && text.length > 1) {\n        textContent += text + ' ';\n      }\n    }\n    \n    return textContent.trim();\n  }\n  \n  // Wait for page to be fully loaded and expand sections\n  return new Promise((resolve) => {\n    setTimeout(async () => {\n      console.log('\u23F3 Starting comprehensive extraction process...');\n      \n      // Step 1: Scroll through entire page to load content\n      await scrollAndWait(2000);\n      \n      // Step 2: Expand collapsed sections\n      const expandedSections = expandSections();\n      \n      // Step 3: Wait for expanded content to load\n      if (expandedSections > 0) {\n        await new Promise(r => setTimeout(r, 1500));\n      }\n      \n      // Step 4: Extract from multiple areas and combine\n      const contentSources = [\n        // Main content areas\n        'main[role=\"main\"]',\n        '.scaffold-layout__main',\n        '.scaffold-layout-container__content',\n        \n        // Profile sections\n        '.pv-top-card',\n        '.pv-profile-section',\n        '.artdeco-card',\n        \n        // Specific sections\n        '.pv-about-section',\n        '.pv-experience-section', \n        '.pv-education-section',\n        '.pv-skill-categories-section',\n        '.pv-profile-section--education',\n        '.pv-profile-section--experience',\n        \n        // Modern LinkedIn selectors\n        '[data-view-name=\"profile-component-entity\"]',\n        '.pvs-list',\n        '.pvs-entity'\n      ];\n      \n      let allTextContent = '';\n      let extractedSections = 0;\n      \n      contentSources.forEach((selector, index) => {\n        const elements = document.querySelectorAll(selector);\n        elements.forEach((element, elemIndex) => {\n          const visibleText = getVisibleText(element);\n          if (visibleText.length > 50) { // Lower threshold to catch more content\n            allTextContent += `\\n--- Section ${index}-${elemIndex} (${selector}) ---\\n`;\n            allTextContent += visibleText + '\\n';\n            extractedSections++;\n          }\n        });\n      });\n      \n      console.log(`\u2705 Extracted content from ${extractedSections} sections`);\n      console.log(`\uD83D\uDCCF Total content length: ${allTextContent.length} characters`);\n      \n      // Fallback: get all visible text from body if we didn't get much\n      if (allTextContent.length < 2000) {\n        console.log('\u26A0\uFE0F Low content extracted, falling back to full body text');\n        const bodyElement = document.querySelector('body');\n        if (bodyElement) {\n          allTextContent = getVisibleText(bodyElement);\n        }\n      }\n      \n      // Final fallback\n      if (!allTextContent || allTextContent.length < 500) {\n        console.log('\u26A0\uFE0F Very low content, using innerText fallback');\n        allTextContent = document.body.innerText || document.body.textContent || '';\n      }\n      \n      console.log(`\uD83C\uDFAF Final content length: ${allTextContent.length} characters`);\n      \n      resolve({\n        linkedinUrl: window.location.href,\n        htmlContent: allTextContent,\n        // All other fields will be null - LLM will extract everything\n        name: null,\n        role: null,\n        currentCompany: null,\n        companies: [],\n        highestDegree: null,\n        field: null,\n        schools: [],\n        location: null\n      });\n    }, 500); // Initial delay to let page settle\n  });\n}\n\nasync function extractProfile(): Promise<any> {\n  if (extractedProfile) return extractedProfile;\n  \n  const tab = await getActiveTab();\n  if (!tab.url?.includes(\"linkedin.com\")) {\n    throw new Error(\"Please navigate to a LinkedIn profile page\");\n  }\n\n  const [result] = await chrome.scripting.executeScript({\n    target: { tabId: tab.id! },\n    func: extractLinkedInProfile,\n  });\n\n  // The function now returns a Promise, so we need to await it\n  extractedProfile = await result.result;\n  return extractedProfile;\n}\n\nasync function handleAddToNotion() {\n  const buttonId = \"addToNotionBtn\";\n  \n  try {\n    setButtonLoading(buttonId, true);\n    setStatus(\"Extracting profile information...\", 'loading');\n    \n    const profile = await extractProfile();\n    console.log(\"Extracted profile:\", profile);\n    \n    // Skip name validation since LLM will extract it from HTML\n    if (!profile.htmlContent) {\n      throw new Error(\"Could not extract page content. Make sure you're on a LinkedIn profile page.\");\n    }\n    \n    const linkedinReached = (document.getElementById(\"linkedinReached\") as HTMLInputElement).checked;\n    const emailReached = (document.getElementById(\"emailReached\") as HTMLInputElement).checked;\n    \n    let linkedinMessage = null;\n    let emailMessage = null;\n    \n    if (linkedinReached) {\n      linkedinMessage = \"Reached out - no message specified\";\n    }\n    if (emailReached) {\n      emailMessage = \"Reached out - no message specified\";\n    }\n    \n    setStatus(\"Saving to Notion database...\", 'loading');\n    \n    const payload = {\n      profile,\n      ask: \"Add to Notion\",\n      options: {\n        saveDraftToNotion: true,\n        linkedinMessage,\n        emailMessage,\n      },\n    };\n    \n    const response = await fetch(`${BACKEND_URL}/draft`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(payload),\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ detail: \"Unknown error\" }));\n      throw new Error(`Server error: ${errorData.detail || response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log(\"Backend response:\", data);\n    \n    // Show Notion result using data from backend response\n    const notionContent = document.getElementById(\"notionContent\")!;\n    const savedFields = data.notion?.savedFields || {};\n    notionContent.innerHTML = `\n      <p><strong>${savedFields.name || 'Profile'}</strong> saved successfully!</p>\n      <p>\uD83D\uDCCD ${savedFields.location || 'Location not found'}</p>\n      <p>\uD83D\uDCBC ${savedFields.role || 'Role not found'} ${savedFields.currentCompany ? `at ${savedFields.currentCompany}` : ''}</p>\n      ${data.notion?.url ? `<a href=\"${data.notion.url}\" target=\"_blank\" class=\"notion-link\">\uD83D\uDD17 Open in Notion</a>` : ''}\n    `;\n    \n    showSection(\"notionResult\");\n            setStatus(\"Successfully saved to Notion!\", 'success');\n        \n        // Show success feedback on button\n        setButtonLoading(buttonId, false, \"Saved!\");\n    setTimeout(() => {\n      const btn = document.getElementById(buttonId) as HTMLButtonElement;\n      btn.textContent = \"Add Profile to Notion\";\n    }, 2000);\n    \n    setTimeout(hideStatus, 4000);\n    \n      } catch (error) {\n      console.error(\"Add to Notion error:\", error);\n      setStatus(`Error: ${error}`, 'error');\n      setButtonLoading(buttonId, false);\n    }\n}\n\nasync function handleGenerateMessage(type: 'linkedin' | 'email') {\n  const buttonId = type === 'linkedin' ? 'generateLinkedInDraftBtn' : 'generateEmailDraftBtn';\n  \n  try {\n    setButtonLoading(buttonId, true);\n    setStatus(\"Extracting profile information...\", 'loading');\n    \n    const profile = await extractProfile();\n    \n    // Skip name validation since LLM will extract it from HTML\n    if (!profile.htmlContent) {\n      throw new Error(\"Could not extract page content. Make sure you're on a LinkedIn profile page.\");\n    }\n    \n    const askTextarea = document.getElementById(type === 'linkedin' ? 'linkedinAsk' : 'emailAsk') as HTMLTextAreaElement;\n    const ask = askTextarea.value.trim();\n    \n    if (!ask) {\n      throw new Error(\"Please enter your request or select a quick option\");\n    }\n    \n    setStatus(`Generating ${type} message with AI...`, 'loading');\n    \n    const payload = {\n      profile,\n      ask,\n      options: {\n        saveDraftToNotion: false,\n        messageType: type,\n      },\n    };\n    \n    const response = await fetch(`${BACKEND_URL}/draft`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(payload),\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ detail: \"Unknown error\" }));\n      throw new Error(`Server error: ${errorData.detail || response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log(\"Backend response:\", data);\n    \n    if (!data.draft) {\n      throw new Error(\"No draft generated. Make sure OpenAI is configured in your .env file.\");\n    }\n    \n    // Check if Notion entry was updated\n    if (data.notion && data.notion.savedFields?.updated_with_message) {\n      setStatus(`${type === 'linkedin' ? 'LinkedIn' : 'Email'} message generated and Notion entry updated!`, 'success');\n    }\n    \n    // Show draft result\n    const subjectSection = document.getElementById(\"subjectSection\")!;\n    const draftSubject = document.getElementById(\"draftSubject\") as HTMLInputElement;\n    const draftBody = document.getElementById(\"draftBody\") as HTMLTextAreaElement;\n    \n    if (type === 'email' && data.draft.subject) {\n      subjectSection.classList.remove('hidden');\n      draftSubject.value = data.draft.subject;\n    } else {\n      subjectSection.classList.add('hidden');\n    }\n    \n    draftBody.value = data.draft.body;\n    \n    showSection(\"draftResult\");\n    \n    // Only show the basic success message if we didn't already show the Notion update message\n    if (!(data.notion && data.notion.savedFields?.updated_with_message)) {\n      setStatus(`${type === 'linkedin' ? 'LinkedIn' : 'Email'} message generated successfully!`, 'success');\n    }\n    \n    // Show success feedback on button\n    setButtonLoading(buttonId, false, \"Generated!\");\n    setTimeout(() => {\n      const btn = document.getElementById(buttonId) as HTMLButtonElement;\n      btn.textContent = type === 'linkedin' ? \"Generate LinkedIn Draft\" : \"Generate Email Draft\";\n    }, 2000);\n    \n    setTimeout(hideStatus, 4000);\n    \n  } catch (error) {\n    console.error(\"Generate message error:\", error);\n    setStatus(`Error: ${error}`, 'error');\n    setButtonLoading(buttonId, false);\n  }\n}\n\nfunction copyDraft() {\n  const subjectEl = document.getElementById(\"draftSubject\") as HTMLInputElement;\n  const bodyEl = document.getElementById(\"draftBody\") as HTMLTextAreaElement;\n  \n  let fullText = bodyEl.value;\n  if (!document.getElementById(\"subjectSection\")!.classList.contains('hidden')) {\n    fullText = `Subject: ${subjectEl.value}\\n\\n${bodyEl.value}`;\n  }\n  \n      navigator.clipboard.writeText(fullText).then(() => {\n      const btn = document.getElementById(\"copyBtn\") as HTMLButtonElement;\n      const originalText = btn.textContent;\n      btn.textContent = \"Copied!\";\n      btn.style.background = \"#059669\";\n      setTimeout(() => {\n        btn.textContent = originalText;\n        btn.style.background = \"#10b981\";\n      }, 2000);\n    }).catch(() => {\n      setStatus(\"Failed to copy to clipboard\", 'error');\n    });\n}\n\nfunction setupQuickOptions() {\n  document.querySelectorAll('.quick-option').forEach(btn => {\n    btn.addEventListener('click', (e) => {\n      const target = e.target as HTMLButtonElement;\n      const ask = target.getAttribute('data-ask');\n      const isLinkedin = target.closest('#linkedinMessageSection');\n      const textarea = document.getElementById(isLinkedin ? 'linkedinAsk' : 'emailAsk') as HTMLTextAreaElement;\n      textarea.value = ask || '';\n      \n      // Visual feedback\n      target.style.background = \"#e5e7eb\";\n      setTimeout(() => {\n        target.style.background = \"white\";\n      }, 200);\n    });\n  });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Add to Notion\n  document.getElementById(\"addToNotionBtn\")?.addEventListener(\"click\", handleAddToNotion);\n  \n  // Message type selection\n  document.getElementById(\"generateLinkedInBtn\")?.addEventListener(\"click\", () => {\n    hideSection(\"messageTypeSection\");\n    hideSection(\"emailMessageSection\");\n    showSection(\"linkedinMessageSection\");\n  });\n  \n  document.getElementById(\"generateEmailBtn\")?.addEventListener(\"click\", () => {\n    hideSection(\"messageTypeSection\");\n    hideSection(\"linkedinMessageSection\");\n    showSection(\"emailMessageSection\");\n  });\n  \n  // Back buttons\n  document.getElementById(\"backFromLinkedInBtn\")?.addEventListener(\"click\", () => {\n    hideSection(\"linkedinMessageSection\");\n    hideSection(\"emailMessageSection\");\n    showSection(\"messageTypeSection\");\n  });\n  \n  document.getElementById(\"backFromEmailBtn\")?.addEventListener(\"click\", () => {\n    hideSection(\"linkedinMessageSection\");\n    hideSection(\"emailMessageSection\");\n    showSection(\"messageTypeSection\");\n  });\n  \n  // Generate drafts\n  document.getElementById(\"generateLinkedInDraftBtn\")?.addEventListener(\"click\", () => handleGenerateMessage('linkedin'));\n  document.getElementById(\"generateEmailDraftBtn\")?.addEventListener(\"click\", () => handleGenerateMessage('email'));\n  \n  // Copy functionality\n  document.getElementById(\"copyBtn\")?.addEventListener(\"click\", copyDraft);\n  \n  // Setup quick options\n  setupQuickOptions();\n}); "],
  "mappings": "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",
  "names": ["node"]
}
