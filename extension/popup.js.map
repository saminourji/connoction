{
  "version": 3,
  "sources": ["src/popup.ts"],
  "sourcesContent": ["const BACKEND_URL = \"http://127.0.0.1:8000\";\n\nasync function getActiveTab(): Promise<chrome.tabs.Tab> {\n  const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n  if (!tab || !tab.id) throw new Error(\"No active tab\");\n  return tab;\n}\n\nfunction setStatus(msg: string) {\n  const el = document.getElementById(\"status\");\n  if (el) el.textContent = msg;\n}\n\nfunction showResult(notionText: string, draft?: { subject: string; body: string }) {\n  const wrap = document.getElementById(\"result\")!;\n  wrap.style.display = \"block\";\n  const notion = document.getElementById(\"notion\")!;\n  notion.textContent = notionText;\n  const draftWrap = document.getElementById(\"draftWrap\")!;\n  if (draft) {\n    draftWrap.style.display = \"block\";\n    (document.getElementById(\"subject\")!).textContent = draft.subject;\n    (document.getElementById(\"body\")!).textContent = draft.body;\n  } else {\n    draftWrap.style.display = \"none\";\n  }\n}\n\nasync function onExtract() {\n  setStatus(\"Extracting visible profile...\");\n\n  const ask = (document.getElementById(\"ask\") as HTMLTextAreaElement).value.trim();\n  const destination = (document.getElementById(\"destination\") as HTMLSelectElement).value as \"\" | \"LinkedIn Message\" | \"Email Message\";\n\n  const tab = await getActiveTab();\n\n  const [{ result }] = await chrome.scripting.executeScript({\n    target: { tabId: tab.id! },\n    func: () => {\n      function text(el: Element | null): string | null {\n        return el ? (el.textContent || \"\").replace(/\\s+/g, \" \").trim() : null;\n      }\n\n      const name = text(document.querySelector(\"main h1\"));\n\n      // Try to find location near the name block\n      let location: string | null = null;\n      const nameEl = document.querySelector(\"main h1\");\n      if (nameEl) {\n        const container = nameEl.closest(\"section, div\");\n        if (container) {\n          const locCand = container.querySelector('span[class*=\"text-body-small\"], div[class*=\"text-body-small\"]');\n          location = text(locCand);\n        }\n      }\n      if (!location) {\n        const locCand = document.querySelector('span[class*=\"text-body-small\"], div[class*=\"text-body-small\"]');\n        location = text(locCand);\n      }\n\n      // Experience parsing: get top few experience cards\n      function extractExperiences() {\n        const items: { title: string | null; company: string | null; date: string | null }[] = [];\n        const anchors = Array.from(document.querySelectorAll('a[href*=\"add-edit/POSITION\"], a[data-field=\"experience_company_logo\"]'));\n        for (const a of anchors.slice(0, 10)) {\n          const card = a.closest('[data-view-name=\"profile-component-entity\"], li, div');\n          if (!card) continue;\n          const titleEl = card.querySelector('.t-bold span[aria-hidden=\"true\"], .t-bold, strong');\n          const title = text(titleEl);\n          const companyEl = card.querySelector('.t-14.t-normal span[aria-hidden=\"true\"], .t-14.t-normal');\n          let company = text(companyEl);\n          if (company && company.includes(' \u00B7 ')) company = company.split(' \u00B7 ')[0].trim();\n          const dateEl = card.querySelector('.pvs-entity__caption-wrapper[aria-hidden=\"true\"], .t-black--light .pvs-entity__caption-wrapper, .t-black--light');\n          const date = text(dateEl);\n          if (title || company) items.push({ title, company, date });\n        }\n        return items;\n      }\n\n      const exps = extractExperiences();\n      // Prefer entries that look current (Present)\n      const current = exps.find(e => (e.date || '').toLowerCase().includes('present')) || exps[0] || { title: null, company: null };\n\n      // Education parsing: pick first two schools\n      function extractEducation() {\n        const results: { school: string | null; degree: string | null }[] = [];\n        const anchors = Array.from(document.querySelectorAll('a[href*=\"add-edit/EDUCATION\"]'));\n        for (const a of anchors.slice(0, 5)) {\n          const card = a.closest('[data-view-name=\"profile-component-entity\"], li, div');\n          if (!card) continue;\n          const schoolEl = card.querySelector('.t-bold span[aria-hidden=\"true\"], .t-bold');\n          const degreeEl = card.querySelector('.t-14.t-normal span[aria-hidden=\"true\"], .t-14.t-normal');\n          const school = text(schoolEl);\n          const degree = text(degreeEl);\n          results.push({ school, degree });\n        }\n        return results;\n      }\n\n      const edus = extractEducation();\n      const schools = edus.map(e => e.school).filter(Boolean) as string[];\n      const degrees = edus.map(e => e.degree).filter(Boolean) as string[];\n\n      // Best-effort role/company\n      const role = current.title || null;\n      const currentCompany = current.company || null;\n\n      return { name, location, role, currentCompany, schools, degrees };\n    },\n  });\n\n  const profile = {\n    name: result?.name || null,\n    role: result?.role || null,\n    currentCompany: result?.currentCompany || null,\n    highestDegree: (result?.degrees && result.degrees[0]) || null,\n    field: null,\n    schools: (result?.schools || []).slice(0, 3),\n    location: result?.location || null,\n    linkedinUrl: tab.url || undefined,\n  };\n\n  setStatus(\"Saving to Notion...\");\n\n  const resp = await fetch(`${BACKEND_URL}/draft`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      profile,\n      ask,\n      options: {\n        saveDraftToNotion: Boolean(destination),\n        draftDestination: destination || null,\n      },\n    }),\n  });\n\n  if (!resp.ok) {\n    const err = await resp.text();\n    setStatus(`Error: ${resp.status} ${err}`);\n    return;\n  }\n\n  const data = await resp.json();\n  setStatus(\"\");\n\n  showResult(data?.notion?.url || data?.notion?.pageId || \"Saved\", data.draft);\n}\n\nfunction onCopy() {\n  const subject = (document.getElementById(\"subject\")!).textContent || \"\";\n  const body = (document.getElementById(\"body\")!).textContent || \"\";\n  const text = subject ? `Subject: ${subject}\\n\\n${body}` : body;\n  navigator.clipboard.writeText(text);\n}\n\n(document.getElementById(\"extract\") as HTMLButtonElement).addEventListener(\"click\", () => {\n  onExtract().catch(err => setStatus(String(err)));\n});\n(document.getElementById(\"copy\") as HTMLButtonElement).addEventListener(\"click\", onCopy); "],
  "mappings": "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",
  "names": []
}
