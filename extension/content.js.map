{
  "version": 3,
  "sources": ["src/content.ts"],
  "sourcesContent": ["// Content script for Connoction floating panel\nconst BACKEND_URL = \"http://127.0.0.1:8000\";\n\n// Helper function to make requests from content script\nasync function makeBackendRequest(endpoint: string, data: any) {\n  try {\n    const response = await fetch(`${BACKEND_URL}${endpoint}`, {\n      method: \"POST\",\n      headers: { \n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      body: JSON.stringify(data),\n      mode: 'cors'\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ detail: \"Unknown error\" }));\n      throw new Error(`Server error: ${errorData.detail || response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new Error(\"Cannot connect to backend. Make sure the backend server is running at http://127.0.0.1:8000\");\n    }\n    throw error;\n  }\n}\n\nlet extractedProfile: any = null;\nlet floatingPanel: HTMLElement | null = null;\n\n// Create the floating panel HTML\nfunction createFloatingPanel(): string {\n  return `\n    <div id=\"connoction-floating-panel\" class=\"collapsed\">\n      <div class=\"panel-content\">\n        <div class=\"glass-container\">\n          <div class=\"header\">\n            <h1>Connoction</h1>\n            <button class=\"collapse-btn\" id=\"collapseBtn\">\u2212</button>\n          </div>\n          \n          <div id=\"status\" class=\"status hidden\"></div>\n          \n          <!-- Add to Notion -->\n          <div class=\"section\">\n            <div class=\"section-title\">Save Profile</div>\n            <div class=\"glass-panel\">\n              <div class=\"checkbox-group\">\n                <div class=\"checkbox-item\">\n                  <input type=\"checkbox\" id=\"linkedinReached\">\n                  <label for=\"linkedinReached\">LinkedIn - Already reached out</label>\n                </div>\n                <div class=\"checkbox-item\">\n                  <input type=\"checkbox\" id=\"emailReached\">\n                  <label for=\"emailReached\">Email - Already reached out</label>\n                </div>\n              </div>\n              <button id=\"addToNotionBtn\" class=\"btn-primary\">Add to Notion</button>\n            </div>\n            </div>\n          \n          <!-- Generate Message -->\n          <div class=\"section\">\n            <div class=\"section-title\">Generate Message</div>\n            <div class=\"glass-panel\">\n              <div id=\"messageTypeSection\">\n                <button id=\"generateLinkedInBtn\" class=\"btn-secondary\">LinkedIn Message</button>\n                <button id=\"generateEmailBtn\" class=\"btn-secondary\">Email Message</button>\n              </div>\n            \n            <!-- LinkedIn Message Generation -->\n            <div id=\"linkedinMessageSection\" class=\"hidden\">\n              <div class=\"section-header\">\n                <button id=\"backFromLinkedInBtn\" class=\"btn-back\">\u2190 Back</button>\n                <h3>LinkedIn Message</h3>\n              </div>\n              <div class=\"quick-options\">\n                <button class=\"quick-option\" data-ask=\"Request to chat for 15 mins\">15min chat</button>\n                <button class=\"quick-option\" data-ask=\"Request to chat for 20 mins\">20min chat</button>\n                <button class=\"quick-option\" data-ask=\"Request to review resume\">Resume review</button>\n                <button class=\"quick-option\" data-ask=\"Request for career advice\">Career advice</button>\n              </div>\n              <textarea id=\"linkedinAsk\" placeholder=\"Or enter custom request...\"></textarea>\n              <button id=\"generateLinkedInDraftBtn\" class=\"btn-primary\">Generate Draft</button>\n            </div>\n            \n            <!-- Email Message Generation -->\n            <div id=\"emailMessageSection\" class=\"hidden\">\n              <div class=\"section-header\">\n                <button id=\"backFromEmailBtn\" class=\"btn-back\">\u2190 Back</button>\n                <h3>Email Message</h3>\n              </div>\n              <div class=\"quick-options\">\n                <button class=\"quick-option\" data-ask=\"Request to chat for 15 mins\">15min chat</button>\n                <button class=\"quick-option\" data-ask=\"Request to chat for 20 mins\">20min chat</button>\n                <button class=\"quick-option\" data-ask=\"Request to review resume\">Resume review</button>\n                <button class=\"quick-option\" data-ask=\"Request for career advice\">Career advice</button>\n              </div>\n              <textarea id=\"emailAsk\" placeholder=\"Or enter custom request...\"></textarea>\n              <button id=\"generateEmailDraftBtn\" class=\"btn-primary\">Generate Draft</button>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Results -->\n        <div id=\"notionResult\" class=\"section hidden\">\n          <div class=\"section-title\">Saved to Notion</div>\n          <div class=\"glass-panel\">\n            <div id=\"notionContent\" class=\"profile-info\"></div>\n          </div>\n        </div>\n        \n        <div id=\"draftResult\" class=\"section hidden\">\n          <div class=\"section-title\">Generated Message</div>\n          <div class=\"glass-panel\">\n            <div class=\"draft-result\">\n              <div id=\"subjectSection\" class=\"hidden\">\n                <label>Subject</label>\n                <input id=\"draftSubject\" type=\"text\" readonly />\n              </div>\n              <label>Message</label>\n              <textarea id=\"draftBody\" readonly rows=\"6\"></textarea>\n              <button id=\"copyBtn\" class=\"btn-primary\">Copy to Clipboard</button>\n            </div>\n          </div>\n        </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Utility functions from popup.ts\nfunction setStatus(message: string, type: 'loading' | 'success' | 'error') {\n  const statusEl = document.getElementById(\"status\");\n  if (!statusEl) return;\n  \n  statusEl.textContent = message;\n  statusEl.className = `status ${type}`;\n  statusEl.classList.remove('hidden');\n}\n\nfunction hideStatus() {\n  const statusEl = document.getElementById(\"status\");\n  if (statusEl) {\n    statusEl.classList.add('hidden');\n  }\n}\n\nfunction showSection(sectionId: string) {\n  // Hide all sections first\n  const sections = ['messageTypeSection', 'linkedinMessageSection', 'emailMessageSection', 'notionResult', 'draftResult'];\n  sections.forEach(id => {\n    const el = document.getElementById(id);\n    if (el) el.classList.add('hidden');\n  });\n  \n  // Show requested section\n  const section = document.getElementById(sectionId);\n  if (section) section.classList.remove('hidden');\n}\n\nfunction setButtonLoading(buttonId: string, loading: boolean, originalText?: string) {\n  const btn = document.getElementById(buttonId) as HTMLButtonElement;\n  if (!btn) return;\n\n  if (loading) {\n    btn.disabled = true;\n    btn.textContent = \"Loading...\";\n    btn.style.opacity = '0.7';\n  } else {\n    btn.disabled = false;\n    btn.textContent = originalText || btn.textContent;\n    btn.style.opacity = '1';\n  }\n}\n\n// LinkedIn profile extraction function\nfunction extractLinkedInProfile(): any {\n  const profile: any = {};\n  \n  // Get LinkedIn URL\n  profile.linkedinUrl = window.location.href;\n  \n  // Extract name - look for main h1 with specific classes\n  const nameEl = document.querySelector('h1.inline.t-24.v-align-middle.break-words, h1[class*=\"inline\"][class*=\"t-24\"]');\n  profile.name = nameEl?.textContent?.trim() || null;\n  \n  // Extract role and companies from experience section\n  const experienceItems = document.querySelectorAll('[data-view-name=\"profile-component-entity\"]');\n  const companies = [];\n  \n  experienceItems.forEach((item, index) => {\n    const titleElement = item.querySelector('.t-bold span[aria-hidden=\"true\"]');\n    const companyElement = item.querySelector('.t-14.t-normal span[aria-hidden=\"true\"]');\n    \n    if (titleElement && companyElement) {\n      const title = titleElement.textContent?.trim();\n      const company = companyElement.textContent?.trim();\n      \n      // Get the most recent role (first experience item)\n      if (index === 0 && title) {\n        profile.role = title;\n      }\n      \n      // Collect companies (avoid duplicates and filter out education institutions)\n      if (company && !company.includes(\"University\") && !company.includes(\"School\") && !company.includes(\"College\") && !companies.includes(company)) {\n        companies.push(company);\n      }\n    }\n  });\n  \n  profile.companies = companies;\n  \n  // Extract location\n  const locationEl = document.querySelector('.text-body-small.inline.t-black--light.break-words, span[class*=\"text-body-small\"][class*=\"t-black--light\"]');\n  profile.location = locationEl?.textContent?.trim() || null;\n  \n  // Set current company as the first company from experience\n  profile.currentCompany = companies.length > 0 ? companies[0] : null;\n  \n  // Extract education information\n  profile.schools = [];\n  const degrees = [];\n  const fields = [];\n  \n  // Look for education section specifically\n  const educationSection = document.querySelector('#education');\n  let educationItems = [];\n  \n  if (educationSection) {\n    educationItems = educationSection.querySelectorAll('[data-view-name=\"profile-component-entity\"]');\n  } else {\n    // Fallback: look for education items in all sections\n    educationItems = Array.from(document.querySelectorAll('[data-view-name=\"profile-component-entity\"]')).filter(item => {\n      const schoolElement = item.querySelector('.t-bold span[aria-hidden=\"true\"]');\n      const school = schoolElement?.textContent?.trim();\n      return school && (school.includes(\"University\") || school.includes(\"School\") || school.includes(\"College\") || school.includes(\"Institute\"));\n    });\n  }\n  \n  educationItems.forEach(item => {\n    const schoolElement = item.querySelector('.t-bold span[aria-hidden=\"true\"]');\n    const degreeElement = item.querySelector('.t-14.t-normal span[aria-hidden=\"true\"]');\n    \n    const school = schoolElement?.textContent?.trim();\n    const degreeText = degreeElement?.textContent?.trim();\n    \n    // Extract school\n    if (school && !profile.schools.includes(school)) {\n      profile.schools.push(school);\n    }\n    \n    // Extract degree information\n    if (degreeText) {\n      // Look for degree types\n      if (degreeText.includes(\"PhD\") || degreeText.includes(\"Doctor\")) {\n        degrees.push(\"PhD\");\n      } else if (degreeText.includes(\"Master\") || degreeText.includes(\"MS\") || degreeText.includes(\"MA\") || degreeText.includes(\"MBA\")) {\n        degrees.push(\"Master's\");\n      } else if (degreeText.includes(\"Bachelor\") || degreeText.includes(\"BS\") || degreeText.includes(\"BA\") || degreeText.includes(\"BEng\")) {\n        degrees.push(\"Bachelor's\");\n      }\n      \n      // Extract field information\n      const fieldKeywords = {\n        \"PM\": [\"product management\", \"business\", \"management\", \"economics\"],\n        \"SWE\": [\"computer science\", \"software\", \"engineering\", \"cs\", \"computer engineering\"],\n        \"AI SWE\": [\"artificial intelligence\", \"machine learning\", \"ai\", \"ml\", \"data science\"],\n        \"MLE\": [\"machine learning\", \"data science\", \"statistics\", \"ai\", \"ml\"],\n        \"Research\": [\"research\", \"phd\", \"science\", \"physics\", \"chemistry\", \"biology\", \"mathematics\"]\n      };\n      \n      const lowerDegreeText = degreeText.toLowerCase();\n      for (const [field, keywords] of Object.entries(fieldKeywords)) {\n        if (keywords.some(keyword => lowerDegreeText.includes(keyword))) {\n          if (!fields.includes(field)) {\n            fields.push(field);\n          }\n        }\n      }\n    }\n  });\n  \n  // Set highest degree\n  if (degrees.length > 0) {\n    const degreeHierarchy = [\"PhD\", \"Master's\", \"Bachelor's\"];\n    profile.highestDegree = degreeHierarchy.find(degree => degrees.includes(degree)) || degrees[0];\n  }\n  \n  // Set field (can be multiple)\n  profile.field = fields;\n  \n  return profile;\n}\n\nasync function extractProfile(): Promise<any> {\n  if (extractedProfile) return extractedProfile;\n  \n  if (!window.location.href.includes(\"linkedin.com\")) {\n    throw new Error(\"Please navigate to a LinkedIn profile page\");\n  }\n  \n  extractedProfile = extractLinkedInProfile();\n  return extractedProfile;\n}\n\n// Event handlers\nasync function handleAddToNotion() {\n  const buttonId = \"addToNotionBtn\";\n  \n  try {\n    setButtonLoading(buttonId, true);\n    setStatus(\"Extracting profile information...\", 'loading');\n    \n    const profile = await extractProfile();\n    console.log(\"Extracted profile:\", profile);\n    \n    if (!profile.name) {\n      throw new Error(\"Could not extract profile name. Make sure you're on a LinkedIn profile page.\");\n    }\n    \n    const linkedinReached = (document.getElementById(\"linkedinReached\") as HTMLInputElement).checked;\n    const emailReached = (document.getElementById(\"emailReached\") as HTMLInputElement).checked;\n    \n    setStatus(\"Saving to Notion...\", 'loading');\n    \n    const linkedinMessage = linkedinReached ? \"Contacted via LinkedIn\" : null;\n    const emailMessage = emailReached ? \"Contacted via Email\" : null;\n    \n    const payload = {\n      profile,\n      ask: \"\",\n      options: {\n        saveDraftToNotion: true,\n        linkedinMessage,\n        emailMessage,\n      },\n    };\n    \n    const data = await makeBackendRequest('/draft', payload);\n    console.log(\"Backend response:\", data);\n    \n    // Show Notion result\n    const notionContent = document.getElementById(\"notionContent\")!;\n    notionContent.innerHTML = `\n      <p><strong>${profile.name}</strong> saved successfully!</p>\n      <p>${profile.location || 'Location not found'}</p>\n      <p>${profile.role || 'Role not found'} ${profile.currentCompany ? `at ${profile.currentCompany}` : ''}</p>\n      ${data.notion?.url ? `<a href=\"${data.notion.url}\" target=\"_blank\" class=\"notion-link\">Open in Notion</a>` : ''}\n    `;\n    \n    showSection(\"notionResult\");\n    setStatus(\"Successfully saved to Notion!\", 'success');\n    \n    // Show success feedback on button\n    setButtonLoading(buttonId, false, \"Saved!\");\n    setTimeout(() => {\n      const btn = document.getElementById(buttonId) as HTMLButtonElement;\n      if (btn) btn.textContent = \"Add Profile to Notion\";\n    }, 2000);\n    \n    setTimeout(hideStatus, 4000);\n    \n  } catch (error) {\n    console.error(\"Add to Notion error:\", error);\n    setStatus(`Error: ${error}`, 'error');\n    setButtonLoading(buttonId, false);\n  }\n}\n\nasync function handleGenerateMessage(type: 'linkedin' | 'email') {\n  const buttonId = type === 'linkedin' ? 'generateLinkedInDraftBtn' : 'generateEmailDraftBtn';\n  \n  try {\n    setButtonLoading(buttonId, true);\n    setStatus(\"Extracting profile information...\", 'loading');\n    \n    const profile = await extractProfile();\n    \n    if (!profile.name) {\n      throw new Error(\"Could not extract profile name. Make sure you're on a LinkedIn profile page.\");\n    }\n    \n    const askTextarea = document.getElementById(type === 'linkedin' ? 'linkedinAsk' : 'emailAsk') as HTMLTextAreaElement;\n    const ask = askTextarea.value.trim();\n    \n    if (!ask) {\n      throw new Error(\"Please enter your request or select a quick option\");\n    }\n    \n    setStatus(`Generating ${type} message with AI...`, 'loading');\n    \n    const payload = {\n      profile,\n      ask,\n      options: {\n        saveDraftToNotion: false,\n        messageType: type,\n      },\n    };\n    \n    const data = await makeBackendRequest('/draft', payload);\n    console.log(\"Backend response:\", data);\n    \n    if (!data.draft) {\n      throw new Error(\"No draft generated. Make sure OpenAI is configured in your .env file.\");\n    }\n    \n    // Check if Notion entry was updated\n    if (data.notion && data.notion.savedFields?.updated_with_message) {\n      setStatus(`${type === 'linkedin' ? 'LinkedIn' : 'Email'} message generated and Notion entry updated!`, 'success');\n    }\n    \n    // Show draft result\n    const subjectSection = document.getElementById(\"subjectSection\")!;\n    const draftSubject = document.getElementById(\"draftSubject\") as HTMLInputElement;\n    const draftBody = document.getElementById(\"draftBody\") as HTMLTextAreaElement;\n    \n    if (type === 'email' && data.draft.subject) {\n      subjectSection.classList.remove('hidden');\n      draftSubject.value = data.draft.subject;\n    } else {\n      subjectSection.classList.add('hidden');\n    }\n    \n    draftBody.value = data.draft.body;\n    \n    showSection(\"draftResult\");\n    \n    // Only show the basic success message if we didn't already show the Notion update message\n    if (!(data.notion && data.notion.savedFields?.updated_with_message)) {\n      setStatus(`${type === 'linkedin' ? 'LinkedIn' : 'Email'} message generated successfully!`, 'success');\n    }\n    \n    // Show success feedback on button\n    setButtonLoading(buttonId, false, \"Generated!\");\n    setTimeout(() => {\n      const btn = document.getElementById(buttonId) as HTMLButtonElement;\n      if (btn) btn.textContent = type === 'linkedin' ? \"Generate LinkedIn Draft\" : \"Generate Email Draft\";\n    }, 2000);\n    \n    setTimeout(hideStatus, 4000);\n    \n  } catch (error) {\n    console.error(\"Generate message error:\", error);\n    setStatus(`Error: ${error}`, 'error');\n    setButtonLoading(buttonId, false);\n  }\n}\n\nfunction copyDraft() {\n  const subjectEl = document.getElementById(\"draftSubject\") as HTMLInputElement;\n  const bodyEl = document.getElementById(\"draftBody\") as HTMLTextAreaElement;\n  let fullText = bodyEl.value;\n  \n  if (!document.getElementById(\"subjectSection\")!.classList.contains(\"hidden\")) {\n    fullText = `Subject: ${subjectEl.value}\\n\\n${bodyEl.value}`;\n  }\n  \n  navigator.clipboard.writeText(fullText).then(() => {\n    const btn = document.getElementById(\"copyBtn\") as HTMLButtonElement;\n    const originalText = btn.textContent;\n    btn.textContent = \"Copied!\";\n    btn.style.background = \"#059669\";\n    setTimeout(() => {\n      if (btn && originalText) {\n        btn.textContent = originalText;\n        btn.style.background = \"#10b981\";\n      }\n    }, 2000);\n  }).catch(() => {\n    setStatus(\"Failed to copy to clipboard\", 'error');\n  });\n}\n\nfunction setupQuickOptions() {\n  document.querySelectorAll(\".quick-option\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const target = e.target as HTMLElement;\n      const ask = target.getAttribute(\"data-ask\");\n      const isLinkedin = target.closest(\"#linkedinMessageSection\");\n      const textarea = document.getElementById(isLinkedin ? \"linkedinAsk\" : \"emailAsk\") as HTMLTextAreaElement;\n      if (textarea && ask) {\n        textarea.value = ask;\n        target.style.background = \"#e5e7eb\";\n        setTimeout(() => {\n          target.style.background = \"white\";\n        }, 200);\n      }\n    });\n  });\n}\n\n// Initialize the floating panel\nfunction initializeFloatingPanel() {\n  // Check if we're on a LinkedIn page\n  if (!window.location.href.includes(\"linkedin.com\")) {\n    return;\n  }\n\n  // Check if panel already exists\n  if (document.getElementById(\"connoction-floating-panel\")) {\n    return;\n  }\n\n  // Create and inject the panel\n  const panelHTML = createFloatingPanel();\n  document.body.insertAdjacentHTML('beforeend', panelHTML);\n  \n  floatingPanel = document.getElementById(\"connoction-floating-panel\");\n  if (!floatingPanel) return;\n\n  // Set up event listeners\n  setupEventListeners();\n  setupQuickOptions();\n}\n\nfunction setupEventListeners() {\n  // Collapse/expand functionality\n  const collapseBtn = document.getElementById(\"collapseBtn\");\n  const panel = document.getElementById(\"connoction-floating-panel\");\n  \n  if (collapseBtn && panel) {\n    collapseBtn.addEventListener(\"click\", () => {\n      panel.classList.toggle(\"collapsed\");\n      collapseBtn.textContent = panel.classList.contains(\"collapsed\") ? \"+\" : \"\u2212\";\n    });\n    \n    // Click on collapsed panel to expand\n    panel.addEventListener(\"click\", (e) => {\n      if (panel.classList.contains(\"collapsed\") && e.target === panel) {\n        panel.classList.remove(\"collapsed\");\n        collapseBtn.textContent = \"\u2212\";\n      }\n    });\n    \n    // Draggable functionality (vertical only)\n    let isDragging = false;\n    let dragStartY = 0;\n    let panelStartY = 0;\n    \n    panel.addEventListener(\"mousedown\", (e) => {\n      // Only allow dragging on the header or collapsed panel\n      const header = panel.querySelector('.header');\n      const isHeader = header?.contains(e.target as Node);\n      const isCollapsed = panel.classList.contains('collapsed');\n      \n      if (isHeader || isCollapsed) {\n        isDragging = true;\n        dragStartY = e.clientY;\n        panelStartY = panel.offsetTop;\n        panel.classList.add('dragging');\n        e.preventDefault();\n      }\n    });\n    \n    document.addEventListener(\"mousemove\", (e) => {\n      if (!isDragging) return;\n      \n      const deltaY = e.clientY - dragStartY;\n      let newY = panelStartY + deltaY;\n      \n      // Constrain to viewport\n      const maxY = window.innerHeight - panel.offsetHeight;\n      newY = Math.max(0, Math.min(newY, maxY));\n      \n      panel.style.top = `${newY}px`;\n      panel.style.transform = 'translateY(0)';\n    });\n    \n    document.addEventListener(\"mouseup\", () => {\n      if (isDragging) {\n        isDragging = false;\n        panel.classList.remove('dragging');\n      }\n    });\n  }\n\n  // Navigation buttons\n  document.getElementById(\"generateLinkedInBtn\")?.addEventListener(\"click\", () => {\n    showSection(\"linkedinMessageSection\");\n  });\n  \n  document.getElementById(\"generateEmailBtn\")?.addEventListener(\"click\", () => {\n    showSection(\"emailMessageSection\");\n  });\n  \n  document.getElementById(\"backFromLinkedInBtn\")?.addEventListener(\"click\", () => {\n    showSection(\"messageTypeSection\");\n  });\n  \n  document.getElementById(\"backFromEmailBtn\")?.addEventListener(\"click\", () => {\n    showSection(\"messageTypeSection\");\n  });\n\n  // Action buttons\n  document.getElementById(\"addToNotionBtn\")?.addEventListener(\"click\", handleAddToNotion);\n  document.getElementById(\"generateLinkedInDraftBtn\")?.addEventListener(\"click\", () => handleGenerateMessage('linkedin'));\n  document.getElementById(\"generateEmailDraftBtn\")?.addEventListener(\"click\", () => handleGenerateMessage('email'));\n  document.getElementById(\"copyBtn\")?.addEventListener(\"click\", copyDraft);\n}\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeFloatingPanel);\n} else {\n  initializeFloatingPanel();\n}\n\n// Re-initialize on navigation (for SPAs like LinkedIn)\nlet currentUrl = window.location.href;\nconst observer = new MutationObserver(() => {\n  if (window.location.href !== currentUrl) {\n    currentUrl = window.location.href;\n    extractedProfile = null; // Reset cached profile\n    setTimeout(initializeFloatingPanel, 1000); // Delay to let page load\n  }\n});\n\nobserver.observe(document.body, { childList: true, subtree: true }); "],
  "mappings": "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",
  "names": []
}
